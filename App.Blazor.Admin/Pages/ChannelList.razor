@page "/channel"
@attribute [Authorize]
@using System.ComponentModel
@using AntDesign.TableModels
@using App.Business.Model
@using App.EFCore.DynamicLinq
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject MessageService _message
@inject NavigationManager Navigation

<PageTitle>Index</PageTitle>

<Card Hoverable>
    <Card>
         <Space>
            <SpaceItem>
                <Input Placeholder="序号" @bind-Value="@query.Id" />
            </SpaceItem>
            <SpaceItem>
                <Input Placeholder="关键字" @bind-Value="@query.Keyword" />
            </SpaceItem>
            <SpaceItem>
                <Space>
                           <SpaceItem>
                               <Button Type="@ButtonType.Primary" @onclick="Query">查询</Button>
                           </SpaceItem>
                           <SpaceItem>
                               <Button Danger>新建</Button>
                           </SpaceItem>
                        </Space>
            </SpaceItem>
        </Space>
    </Card>
    <br />
    @*<Table DataSource="data" TreeChildren="item=>item.Children">
        <Selection CheckStrictly />
        <Column @bind-Field="@context.Title" />
        <Column @bind-Field="@context.State" Width="12%" Sortable />
    </Table>*@
</Card>

@code {
    private ArticleQueryModel query = new ();
    private List<ChannelModel>? data = new();

    protected override async Task OnInitializedAsync()
    {
        await GetArticles();
    }

    private async Task GetArticles()
    {
        var channels = await Http.GetFromJsonAsync<List<ChannelModel>>("/api/admin/channel");
        if(channels != null)
        {
            data = channels;
        }
    }

    private async Task Query()
    {
        await GetArticles();
    }

    private async Task Edit(string id)
    {
        Navigation.NavigateTo($"/admin/article/edit/{id}");
    }

    private async Task Del(string id)
    {
        var resp = await Http.DeleteAsync($"/api/admin/article/{id}");
        if (resp.IsSuccessStatusCode)
        {
            await _message.Success("文章删除成功");
            await GetArticles();
            return;
        }
        await _message.Warn("文章删除失败");
    }

    void OnRowClick(RowData<ArticleListModel> row)
    {
        Console.WriteLine($"row {row.Data.Id} was clicked.");
    }

    public async Task OnChange(QueryModel<ArticleListModel> queryModel)
    {
        await GetArticles();
    }
}