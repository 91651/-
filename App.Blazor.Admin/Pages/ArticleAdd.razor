@page "/admin/article/add"
@attribute [Authorize]
@using System.ComponentModel
@using AntDesign.TableModels
@using Microsoft.AspNetCore.Authorization
@using Vditor.Models
@using App.Business.Model
@inject HttpClient Http
@inject IJSRuntime _jsRuntime

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vditor@3.4.7/dist/index.css" />

<PageTitle>Index</PageTitle>

<Card Hoverable>
    <Form Model="@model"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          LabelColSpan="4"
          WrapperColSpan="16">
        <FormItem Label="标题">
            <Input @bind-Value="@context.Title" />
        </FormItem>
        <FormItem Label="副标题">
            <Input @bind-Value="@context.SubTitle" />
        </FormItem>
        <FormItem Label="栏目">
            <Cascader Options="@channels" ExpandTrigger="hover"></Cascader>
        </FormItem>
        <FormItem Label="来源">
            <Input @bind-Value="@context.Author" />
        </FormItem>
        <FormItem Label="简介">
            <TextArea Rows="2" @bind-Value="@context.Summary"/>
        </FormItem>
        <FormItem Label="内容">
            @markdown
        </FormItem>
    </Form>
</Card>

@code {
    private ArticleModel model = new();
    private List<CascaderNode> channels = new();
    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await LoadMarkdownEditor();
        }
    }

    private void GetChannels()
    {
        var resp = await Http.GetFromJsonAsync<ChannelModel>("/api/admin/article/query", query);
    }

    RenderFragment markdown =
    @<Template>
    </Template>
    ;

    private async Task LoadMarkdownEditor()
    {
        var vditor = "https://cdn.jsdelivr.net/npm/vditor@3.4.7/dist/index.min.js";
        var vditorBlazor = "/_content/Vditor/vditor-blazor.js";
        var objRef = DotNetObjectReference.Create(this);
        //await _jsRuntime.InvokeVoidAsync("appLoadJS", "vditorBlazor", objRef, "Test");
        await _jsRuntime.InvokeVoidAsync("BlazorApp.loadJSWithWaiting", vditor);
        await _jsRuntime.InvokeVoidAsync("BlazorApp.loadJSWithWaiting", vditorBlazor);
        markdown =
        @<Template>
            <Vditor.Editor Mode="wysiwyg" />
        </Template>;
            StateHasChanged();
    }

    //[JSInvokable("Test")]
    //public static async Task Test()
    //{
    //}

    private async Task OnFinish()
    {
    }

    private async Task OnFinishFailed()
    {

    }

}