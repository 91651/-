@page "/role"
@attribute [Authorize]
@using System.ComponentModel
@using AntDesign.TableModels
@using App.Blazor.Admin.Data
@using App.Business.Model
@using App.EFCore.DynamicLinq
@using Microsoft.AspNetCore.Authorization

@inject IAdminApiProvider API
@inject MessageService _message
@inject NavigationManager Navigation

<PageTitle>Index</PageTitle>

<Card>
    <Card>
        <Flex Justify="@("space-between")" Align="@("flex-end")">
            <Flex Justify="@("start")" Align="@("center")" Gap="@("large")" Wrap="wrap" style="width:100%;">
                <div class="form-group">
                    <label for="name">角色名称</label>
                    <Input Placeholder="请输入角色名称" @bind-Value="@query.Name" />
                </div>
            </Flex>
            <Space Size="@("middle")">
                <SpaceItem>
                    <Button>重置</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Danger>
                        搜索
                    </Button>
                </SpaceItem>
            </Space>
        </Flex>           
    </Card>
    <br />
    <Table HidePagination="true" DataSource="roles" IndentSize="20" >
        <PropertyColumn Property="c=>c.Name" />
        <ActionColumn Title="操作">
            <Space>
                <SpaceItem>
                    <Button Type="@ButtonType.Link" Icon="@IconType.Outline.Edit" Size="@ButtonSize.Small" @onclick="() => Edit(context)">编辑</Button>
                </SpaceItem>

                <SpaceItem>
                    <Button Danger Type="@ButtonType.Link" Icon="@IconType.Outline.Delete" Size="@ButtonSize.Small" @onclick="() => Del(context.Id)">删除</Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>

    <Modal Title="添加栏目" Closable="@false" Visible="isShowEditModal" OnOk="@HandleOk" OnCancel="() => isShowEditModal = false">
        <Form @ref="@editForm" Model="@role"
              LabelColSpan="6"
              WrapperColSpan="16"
              OnFinish="Submit">
            <FormItem Label="标题">
                <Input @bind-Value="@context.Name" />
            </FormItem>
        </Form>
    </Modal>

</Card>

@code {
    private RoleQueryModel query = new();
    private RoleModel role = new ();
    private List<RoleModel> roles = new();
    private Form<RoleModel> editForm = default!;
    private bool isShowEditModal = false;

    protected override async Task OnInitializedAsync()
    {
        await GetRoles();
    }

    private async Task GetRoles()
    {
        var data = await API.GetRolesAsync(query);
        if(data != null)
        {
            roles = data.Data;
        }
    }

    private void Edit(RoleModel? role = default)
    {
        if (role != null)
        {
            this.role = role;
        }
        isShowEditModal = true;
    }


    private async Task Submit(EditContext editContext)
    {
        if (!string.IsNullOrWhiteSpace(role.Id))
        {
            var result = await API.UpdateRoleAsync(role.Id, role);
            if (result)
            {
                await _message.Success("角色更新成功");
                isShowEditModal = false;
                await GetRoles();
                return;
            }
            await _message.Warn("角色更新失败");
        }
        else
        {
            var result = await API.AddRoleAsync(role);
            if (result)
            {
                await _message.Success("角色添加成功");
                isShowEditModal = false;
                await GetRoles();
                return;
            }
            await _message.Warn("角色添加失败");
        }
    }

    private void HandleOk(MouseEventArgs e)
    {
        editForm.Submit();
    }

    private async Task Del(string id)
    {
        var result = await API.DelRoleAsync(id);
        if (result)
        {
            await _message.Success("角色删除成功");
            await GetRoles();
            return;
        }
        await _message.Warn("角色删除失败");
    }
}