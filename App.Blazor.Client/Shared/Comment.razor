@using System.Globalization

<CascadingValue Value="this" IsFixed="@true">
    <div class="ant-comment">
        <div class="ant-comment-inner">
            @if ((Avatar != null || AvatarTemplate != null) && (Content != null || ContentTemplate != null))
            {
                <div class="ant-comment-avatar">
                    <span class="ant-avatar" style=" background-color: @GetBackgroundColor(Author); vertical-align: middle;">
                        <!--!-->
                        <span class="ant-avatar-string" style="transform: scale(1) translateX(-50%);">
                            <!--!-->
                            @Avatar
                        </span><!--!-->
                    </span>
                </div>
                <div class="ant-comment-content">
                    <div class="ant-comment-content-author">
                        @if (Author != null || AuthorTemplate != null)
                        {
                            <span class="ant-comment-content-author-name">

                                @if (AuthorTemplate != null)
                                {
                                    @AuthorTemplate
                                }
                                else
                                {
                                    <a>@Author</a>
                                }
                            </span>
                        }

                        @if (Datetime != null || DatetimeTemplate != null)
                        {
                            <span class="ant-comment-content-author-time">
                                @if (DatetimeTemplate != null)
                                {
                                    @DatetimeTemplate
                                }
                                else
                                {
                                    <span>@Datetime</span>
                                }
                            </span>
                        }
                    </div>
                    <div class="ant-comment-content-detail">
                        @if (ContentTemplate != null)
                        {
                            @ContentTemplate

                        }
                        else
                        {
                            <p>@Content</p>
                        }
                    </div>
                    @if (Actions.Count > 0)
                    {
                        <ul class="ant-comment-actions">
                            @foreach (RenderFragment action in Actions)
                            {
                                <li>@action</li>
                            }
                        </ul>
                    }
                </div>
            }
        </div>
        <div class="ant-comment-nested">
            @ChildContent
        </div>
    </div>
</CascadingValue>

@code{
    [Parameter]
    public string Author { get; set; }

    [Parameter]
    public RenderFragment AuthorTemplate { get; set; }

    [Parameter]
    public string Avatar { get; set; }

    [Parameter]
    public RenderFragment AvatarTemplate { get; set; }

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public RenderFragment ContentTemplate { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Datetime { get; set; }

    [Parameter]
    public RenderFragment DatetimeTemplate { get; set; }

    [Parameter]
    public IList<RenderFragment> Actions { get; set; } = new List<RenderFragment>();

    [Parameter]
    public string Placement { get; set; } = "left";

    private bool RightAvatar => Placement?.Equals("right", StringComparison.InvariantCultureIgnoreCase) == true;
    private string[] AvatarColors = { "#f56a00", "#7265e6", "#ffbf00", "#00a2ae" };


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private string GetBackgroundColor(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            return "#ccc";
        }

        char firstLetter = name.ToUpper(CultureInfo.InvariantCulture)[0];
        int colorIndex = (firstLetter - 'A') % AvatarColors.Length;
        return AvatarColors[colorIndex];
    }
}