@page "/article/{Id}"
@page "/p/{Id}"
@attribute [RenderModeInteractiveAuto]
@using App.Blazor.Client.Data
@using App.Business.Model
@inject PersistentComponentState _componentState
@inject IDataProviderApi _api

<PageTitle>@article.Title | 遇见时光-1023.org.cn</PageTitle>
<HeadContent>
    <meta name="description" content="@article.Summary">
    @*为Markdown加载样式*@
    <link href="/lib/github-markdown-css@5.1.0/github-markdown.min.css" rel="stylesheet" />
    <link href="/lib/highlight.js@11.3.1/github.min.css" rel="stylesheet" />
</HeadContent>



<div class="article-section">
    <div class="article-view">
        <h1 class="article-title">@article.Title</h1>
        <div class="article-info">
            <ul>
                <li class="author">作者：<a href="/">@article.Author</a></li>
                <li class="lmname"><a href="/c/@article.ChannelId">@article.ChannelName</a></li>
                <li class="timer">发布：@($"{article.Created:yyyy年M月d日 HH:mm}")</li>
                @*<li class="timer">更新时间：@($"{article.Updated:yyyy年M月d日 HH:mm}")</li>*@
                <li class="view">@article.Viewed 人已阅读</li>
            </ul>
        </div>
        <div class="article-summary"><strong>简介</strong>@article.Summary</div>
        <div class="@(article.Editor == 1 ? "markdown-body" : "" )">
            @((MarkupString)article.Content)
        </div>
    </div>

    <div class="notice">
        <p>本站发布的文章受知识共享协议保护，转载、收录请标明出处。</p>
      </div>

    <div class="next">
        <p>上一篇：<a href="/p/@prevArticle?.Id">@(prevArticle?.Title ?? "已经是第一篇") </a></p>
        <p>下一篇：<a href="/p/@nextArticle?.Id">@(nextArticle?.Title ?? "已经是最后一篇") </a></p>
    </div>
    <div>
        <Card Title="@("评论")">
            <Comments OwnerId="@id" />
        </Card>

    </div>
</div>


@code {
    [Parameter]
    public string id { get; set; }
    private ArticleModel article = new();
    private ArticleModel prevArticle = new();
    private ArticleModel nextArticle = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _componentState.RegisterOnPersisting(PersistArticle);
        if (_componentState.TryTakeFromJson<ArticleModel>(nameof(article), out var data) && data != null)
        {
            article = data;

        }
        else
        {
            article = await _api.GetArticleAsync(id);
        }
        
        await _api.UpdateArticleViewedAsync(id);
        var channelId = article.ChannelId;
        prevArticle = await _api.GetPrevArticleAsync(id);
        nextArticle = await _api.GetNextArticleAsync(id);

    }

    private Task PersistArticle()
    {
        _componentState.PersistAsJson(nameof(article), article);
        return Task.CompletedTask;
    }
}
