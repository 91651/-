@page "/"
@rendermode InteractiveAuto

@using App.Business.Model
@using App.Blazor.Client.Data

@inject PersistentComponentState _componentState
@inject IDataProviderApi _api

<PageTitle>遇见时光-1023.org.cn | 博客首页 | 学习技术、记录生活</PageTitle>
<HeadContent>
    <meta name="description" content="人生百态，爱我所爱！">
</HeadContent>

<section class="site-content container">
    @foreach (var article in articles)
    {
        <article class="hasThumb flex">
            <div class="article-content">
                <h2 class="entry-title hidden">
                    <a class="hoverColor" href="/p/@article.Id" title="@article.Title" rel="bookmark">@article.Title</a>
                </h2>
                <div class="entry-content hidden">
                    @article.Summary
                </div>
                <div class="entry-info">
                    <span class="infoLeft"><i class="iconfont icon-book-read-line"></i>@article.ChannelName</span>
                    <span class="rtime infoLeft"><i class="iconfont icon-calendar-2-line"></i>@($"{article.Created:yyyy年M月d日 HH:mm}")</span>
                    <span><i class="iconfont icon-user-3-line"></i>@article.Author</span>
                </div>
            </div>
            <div class="entry-thumb">
                <a class="focus hidden" href="/p/@article.Id" title="@article.Title">
                    @if (@article.File != null)
                    {
                        <img loading="auto" src="@Path.Combine(article.File.Path, article.File.Name)" alt="@article.Title" title="@article.Title">
                    }
                </a>
            </div>
        </article>
    }
    <div class="pagenavi flex">
        <a class="load-more" @onclick="GetArticles">阅读更多</a>
    </div>
</section>

@code {
    private int page = 1;
    private ArticleQueryModel query = new() {  PageSize = 20 };
    private List<ArticleListModel> articles = new ();


    protected override async Task OnInitializedAsync()
    {
        _componentState.RegisterOnPersisting(PersistArticles);
        if (_componentState.TryTakeFromJson<List<ArticleListModel>>(nameof(articles), out var data) && data != null)
        {
            articles = data;

        }
        else
        {
            await GetArticles();
        }

    }

    private Task PersistArticles()
    {
        _componentState.PersistAsJson(nameof(articles), articles);
        return Task.CompletedTask;
    }

    private async Task GetArticles()
    {
        query.PageIndex = page++;
        var data = (await _api.GetArticlesAsync(query)).Data;
        articles.AddRange(data);
    }
}